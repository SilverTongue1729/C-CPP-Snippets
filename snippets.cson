# I shall keep adding more snippets as I keep getting ideas
# Other than these, I highly recommend checking out Atom's default snippets from the language-c package
# Or https://github.com/textmate/c.tmbundle

'.source.cpp':
  'for_loop':
    'prefix': 'f_'
    'body': 'for_(${1:i},0,n){\n}'

  'for loop':
    'prefix': 'for'
    'body': 'for ($1){\n}'

  'while':
    'prefix': 'w'
    'body': 'while ($1){\n}'

  'do while':
    'prefix': 'do'
    'body': 'do {\n\t$1\n} while();'

  'cin':
    'prefix': 'cin'
    'body': 'cin >> $1;'

  'cout':
    'prefix': 'cout'
    'body': 'cout << $1 << \'\';'

  '#define':
    'prefix': 'def'
    'body': '#define $1'

  '#include <>':
    'prefix': 'Inc'
    'body': '#include <${1:bits/stdc++.h}>'

  'if':
    'prefix': 'if'
    'body': 'if ($1){\n}'

  'if else':
    'prefix': 'ife'
    'body': 'if ($1){\n}\nelse{\n\t\n}'

  'if elseif':
    'prefix': 'iff'
    'body': 'if ($1){\n}\nelse if(){\n\t\n}'

  'if elseif else':
    'prefix': 'iffe'
    'body': 'if ($1){\n}\nelse if(){\n\t\n}\nelse{\n\t\n}'

  'else if ':
    'prefix': 'eif'
    'body': 'else if ($1){\n}'

  'switch':
    'prefix': 'switch'
    'body': 'switch ($1) {\n\tcase :\n\t\tbreak;\n}'

  'case':
    'prefix': 'case'
    'body': 'case $1: \n\tbreak;'

  'main()':
    'prefix': 'main'
    'body': 'int main(){\n\t$1\n\treturn 0;\n}'

  'printf':
    'prefix': 'printf'
    'body': 'printf("${1:%d}", );'

  'scanf':
    'prefix': 'scanf'
    'body': 'scanf("%d$1", &);'

  'int':
    'prefix': 'int'
    'body': 'int $1;'

  'long long':
    'prefix': 'll'
    'body': 'll $1;'

  'vector':
    'prefix': 'vector'
    'body': 'vector<${1:int}> (LIM1,0);'

  'string':
    'prefix': 'str'
    'body': 'string $1;'

  'struct':
    'prefix': 'st'
    'body': 'struct $1{\n};'

  'void':
    'prefix': 'void'
    'body': 'void $1(){\n}'

  'typedef':
    'prefix': 'td'
    'body': 'typedef ${1:int};'

  'using namespace':
    'prefix': 'using'
    'body': 'using namespace ${1:std};'

  'namespace':
    'prefix': 'ns'
    'body': 'namespace $1{\n}'

  'template <typename>':
    'prefix': 'tp'
    'body': 'template <typename $1>'

################################################################################

  'Basic Template':
    'prefix': 'Basic Template'
    'body': '''
#include <bits/stdc++.h>

using namespace std;

#define for_(i,s,e) for ( i=s; ((i<e)&&(s<e))||((i>e)&&(s>=e)); (s<e)?i++:i--)
#define all(x) x.begin(),x.end()
#define MOD1 1000000007
#define MOD2 998244353
#define LIM1 (int)3e5+5
typedef long long ll;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vl;
typedef pair<int,int> pi;

int i,j,t,n,c,ans;

int main(){
  ios_base::sync_with_stdio(false); cin.tie(0);

  cin >> ${1:n};

  return 0;
}
'''

  'fastscan':
    'prefix': 'fs'
    'body': '''
int fastscan(int &number){
  bool negative = 0;
  register int c;

  number = 0;
  c = getchar();
  if (c=='-'){
    negative = 1;
    c = getchar();
  }

  for (; (c>='0' && c<='9'); c=getchar())
    number = number*10+c-'0';
  if (negative)
    number *= -1;
  return number;
}
'''

  'fastprint':
    'prefix': 'fp'
    'body': '''
 void fastprint(int num){
    bool neg = 0;
    if (num < 0)
      num *= -1, neg = 1;
    if (neg)
      putchar('-');

    char snum[65];
    int i = 0;
    do{
        snum[i++] = num % 10 + '0';
        num /= 10;
    } while (num);

    --i;

    while (i >= 0)
      putchar(snum[i--]);
}
'''
  'fast i/o':
    'prefix': 'fio'
    'body': '''
int fastscan(int &number){
  bool negative = 0;
  register int c;

  number = 0;
  c = getchar();
  if (c=='-'){
    negative = 1;
    c = getchar();
  }

  for (; (c>='0' && c<='9'); c=getchar())
    number = number*10+c-'0';
  if (negative)
    number *= -1;
  return number;
}
void fastprint(int num){
    bool neg = 0;
    if (num < 0)
      num *= -1, neg = 1;
    if (neg)
      putchar('-');

    char snum[65];
    int i = 0;
    do{
        snum[i++] = num % 10 + '0';
        num /= 10;
    } while (num);

    --i;

    while (i >= 0)
      putchar(snum[i--]);
}
'''

################################################################################






  # 'put semicolon':
  #   'prefix': 'e'
  #   'body': '= $1;'

