'.source.cpp':
  'for_loop':
    'prefix': 'f_'
    'body': 'for_(${1:i},${2:0},${3:n}){\n}'

  'for loop':
    'prefix': 'for'
    'body': 'for (${1:i}=${2:0};${1:i}<${3:n};${1:i}++){\n}'

  'while':
    'prefix': 'while'
    'body': 'while ($1){\n\t$0\n}'

  'do while':
    'prefix': 'do'
    'body': 'do {\n\t$1\n} while();'

  'cin':
    'prefix': 'cin'
    'body': 'cin >> $1;'

  'cout':
    'prefix': 'cout'
    'body': 'cout << $1 ${2:<< ${3:\'$0${4:\\\\n}\'}};'

  '#define':
    'prefix': 'def'
    'body': '#define $1'

  '#include <>':
    'prefix': 'Inc'
    'body': '#include <${2:${1:bits/stdc++}.h}>'

  '#ifdef DEBUG':
    'prefix': 'Debug'
    'body': '#ifdef DEBUG\n\t$1\n#endif'

  'if':
    'prefix': 'if'
    'body': 'if ($1){\n}'

  'else':
    'prefix': 'el'
    'body': 'else{\n\t$1\n}'

  'if else':
    'prefix': 'ife'
    'body': 'if ($1){\n\nelse{\n\t\n}'

  'if elseif':
    'prefix': 'iff'
    'body': 'if ($1){\n}\nelse if(){\n\t\n}'

  'if elseif else':
    'prefix': 'iffe'
    'body': 'if ($1){\n}\nelse if(){\n\t\n}\nelse{\n\t\n}'

  'else if ':
    'prefix': 'elif'
    'body': 'else if ($1){\n}'

  'switch':
    'prefix': 'switch'
    'body': 'switch ($1) {\n\tcase :\n\t$0\tbreak;\n}'

  'case':
    'prefix': 'case'
    'body': 'case $1: \n\t$0\n\tbreak;'

  'if print':
    'prefix': 'ifprint'
    'body': 'if ($1) printf("$1");'

  'continue':
    'prefix': 'continue'
    'body': 'continue;'

  'return':
    'prefix': 'return'
    'body': 'return ${1:0};'

  'main()':
    'prefix': 'main'
    'body': 'int main(){\n\t$1\n\treturn 0;\n}'

  'printf':
    'prefix': 'printf'
    'body': 'printf("%${1:d}\\\\n", $2);'

  'scanf':
    'prefix': 'scanf'
    'body': 'scanf("%${1:d}", &$2);'

  'fprintf':
    'prefix': 'fprintf'
    'body': 'fprintf($1,"%${2:d}\\\\n",$3);'

  'fscanf':
    'prefix': 'fscanf'
    'body': 'fscanf($1,"%${2:d}\\\\n",$3);'

  'fopen':
    'prefix': 'fopen'
    'body': 'fopen("$1.txt", "${2:w}");\n$0\n\nfclose();'

  'fclose':
    'prefix': 'fclose'
    'body': 'fclose($1);'

  'int':
    'prefix': 'int'
    'body': 'int $1;'

  'long long':
    'prefix': 'll'
    'body': 'll $1;'

  'Sieof':
    'prefix': 'sizeof'
    'body': 'sizeof($1)'

  'vector':
    'prefix': 'vector'
    'body': 'vector<${1:int}> ${2:v}${3:(${4:LIM1},${5:0})};'

  'set':
    'prefix': 'set'
    'body': 'set<${1:int}> $2;'

  'multiset':
    'prefix': 'multiset'
    'body': 'multiset<${1:int}> $2;'

  'insert':
    'prefix': 'insert'
    'body': 'insert($1);'

  'erase':
    'prefix': 'erase'
    'body': 'erase($1);'

  'struct':
    'prefix': 'st'
    'body': 'struct $1{\n\t$0\n};'

  'void':
    'prefix': 'void'
    'body': 'void $1(){\n\t$0\n}'

  'typedef':
    'prefix': 'td'
    'body': 'typedef ${1:int} $2;'

  'using namespace':
    'prefix': 'using'
    'body': 'using namespace ${1:std};'

  'namespace':
    'prefix': 'ns'
    'body': 'namespace $1{\n}'

  'template <typename>':
    'prefix': 'tp'
    'body': 'template <${1:typename} $2>'

################################################################################

  'Basic Template':
    'prefix': 'Basic Template'
    'body': '''
#include <bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update>

#define for_(i,s,e) for ( i=s; ((i<e)&&(s<e))||((i>e)&&(s>=e)); (s<e)?i++:i--)
#define all(x) x.begin(),x.end()
#define endl '\\\\n'
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define sz(a) (int)(a.size())
#define LIM1 300005
// #define DEBUG
typedef long long ll;
typedef vector<int> vi;
typedef array<int, 2> ii;

int i,j,t,n,c,ans;

int main(){
  ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
  #ifdef LOCAL
    freopen("/home/sriteja/Programming/Random/input_01.txt","r",stdin);
  #endif

  cin >> ${1:n};


  return 0;
}
'''

  'GNU PBDS':
    'prefix': 'gnu pbds'
    'body': '''
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
#define indexed_multiset tree<int, null_type, less_equal<int>, rb_tree_tag,tree_order_statistics_node_update>

// *( .find_by_order(i)) returns iterator to ith element, so use *
// order_of_key(k) returns number of items strictly < k
// ordered_set oset;
// indexed_multiset mset;
'''

  'fastscan':
    'prefix': 'fs'
    'body': '''
int fastscan(int &number){
  bool negative = 0;
  register int c;

  number = 0;
  c = getchar();
  if (c=='-'){
    negative = 1;
    c = getchar();
  }

  for (; (c>='0' && c<='9'); c=getchar())
    number = number*10+c-'0';
  if (negative)
    number *= -1;
  return number;
}
'''

  'fastprint':
    'prefix': 'fp'
    'body': '''
 void fastprint(int num){
    bool neg = 0;
    if (num < 0)
      num *= -1, neg = 1;
    if (neg)
      putchar('-');

    char snum[65];
    int i = 0;
    do{
        snum[i++] = num % 10 + '0';
        num /= 10;
    } while (num);

    --i;

    while (i >= 0)
      putchar(snum[i--]);
}
'''
  'fast i/o':
    'prefix': 'fio'
    'body': '''
int fastscan(int &number){
  bool negative = 0;
  register int c;

  number = 0;
  c = getchar();
  if (c=='-'){
    negative = 1;
    c = getchar();
  }

  for (; (c>='0' && c<='9'); c=getchar())
    number = number*10+c-'0';
  if (negative)
    number *= -1;
  return number;
}
void fastprint(int num){
    bool neg = 0;
    if (num < 0)
      num *= -1, neg = 1;
    if (neg)
      putchar('-');

    char snum[65];
    int i = 0;
    do{
        snum[i++] = num % 10 + '0';
        num /= 10;
    } while (num);

    --i;

    while (i >= 0)
      putchar(snum[i--]);
}
'''
  'divide with mod':
    'prefix': 'divide'
    'body': '''
 ll divide(ll mod, ll dividend, ll divisor){
   if (dividend%divisor==0) return 0;
   return (((-1*dividend)%divisor+divisor)%divisor + divisor*divide(divisor,((-1*dividend)%divisor+divisor)%divisor,mod%divisor))/(mod%divisor);
 }

 ll divide2(ll mod, ll dividend, ll divisor){
   return (dividend+mod*divide(mod,dividend,divisor))/divisor;
 }
'''


################################################################################
